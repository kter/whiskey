name: Deploy Whiskey App

on:
  push:
    branches:
      - main        # dev環境へのデプロイ
      - production  # prod環境へのデプロイ
  pull_request:
    branches:
      - main
      - production

env:
  NODE_VERSION: '18'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/production' && 'prd' || 'dev' }}
    permissions:
      id-token: write   # OIDCトークン取得に必要
      contents: read    # コードの読み取りに必要

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug - List files
        run: |
          echo "Repository root contents:"
          ls -la
          echo "Frontend directory contents:"
          ls -la frontend/ || echo "Frontend directory not found"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package.json  # package.jsonに変更

      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/production" ]]; then
            echo "environment=prd" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi
          echo "Detected environment: ${{ github.ref }} -> $(if [[ "${{ github.ref }}" == "refs/heads/production" ]]; then echo "prd"; else echo "dev"; fi)"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ap-northeast-1
          role-session-name: GitHubActions-${{ github.run_id }}

      - name: Get infrastructure outputs
        id: infra
        run: |
          ENV=${{ steps.env.outputs.environment }}
          echo "Getting outputs for environment: $ENV"
          
          # スタック名を確認（dev->Dev, prd->Prd に変換）
          if [[ "$ENV" == "dev" ]]; then
            STACK_NAME="WhiskeyApp-Dev"
          elif [[ "$ENV" == "prd" ]]; then
            STACK_NAME="WhiskeyApp-Prd"
          else
            echo "Error: Unknown environment $ENV"
            exit 1
          fi
          echo "Stack name: $STACK_NAME"
          
          # スタックの存在を確認
          if ! aws cloudformation describe-stacks --stack-name "$STACK_NAME" >/dev/null 2>&1; then
            echo "Error: Stack $STACK_NAME not found"
            echo "Available stacks:"
            aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE --query 'StackSummaries[].StackName' --output text
            exit 1
          fi
          
          BUCKET_NAME=$(aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --query "Stacks[0].Outputs[?OutputKey=='WebAppBucketName'].OutputValue" \
            --output text)
          DISTRIBUTION_ID=$(aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --query "Stacks[0].Outputs[?OutputKey=='CloudFrontDistributionId'].OutputValue" \
            --output text)
          USER_POOL_ID=$(aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --query "Stacks[0].Outputs[?OutputKey=='UserPoolId'].OutputValue" \
            --output text)
          USER_POOL_CLIENT_ID=$(aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --query "Stacks[0].Outputs[?OutputKey=='UserPoolClientId'].OutputValue" \
            --output text)
          IMAGES_BUCKET=$(aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --query "Stacks[0].Outputs[?OutputKey=='ImagesBucketName'].OutputValue" \
            --output text)
          
          echo "Retrieved values:"
          echo "Bucket: $BUCKET_NAME"
          echo "Distribution: $DISTRIBUTION_ID"
          echo "User Pool: $USER_POOL_ID"
          echo "Client ID: $USER_POOL_CLIENT_ID"
          echo "Images Bucket: $IMAGES_BUCKET"
          
          if [[ -z "$BUCKET_NAME" || "$BUCKET_NAME" == "None" ]]; then
            echo "Error: Could not retrieve bucket name"
            exit 1
          fi
          
          echo "bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT
          echo "distribution_id=$DISTRIBUTION_ID" >> $GITHUB_OUTPUT
          echo "user_pool_id=$USER_POOL_ID" >> $GITHUB_OUTPUT
          echo "user_pool_client_id=$USER_POOL_CLIENT_ID" >> $GITHUB_OUTPUT
          echo "images_bucket=$IMAGES_BUCKET" >> $GITHUB_OUTPUT

      - name: Install frontend dependencies
        run: |
          cd frontend
          echo "Installing dependencies..."
          npm install
          echo "Dependencies installed successfully"

      - name: Create environment file
        run: |
          cd frontend
          echo "Creating environment file for ${{ steps.env.outputs.environment }} environment..."
          cat > .env << EOF
          NUXT_PUBLIC_USER_POOL_ID=${{ steps.infra.outputs.user_pool_id }}
          NUXT_PUBLIC_USER_POOL_CLIENT_ID=${{ steps.infra.outputs.user_pool_client_id }}
          NUXT_PUBLIC_REGION=ap-northeast-1
          NUXT_PUBLIC_IMAGES_BUCKET=${{ steps.infra.outputs.images_bucket }}
          NUXT_PUBLIC_API_BASE_URL=${{ steps.env.outputs.environment == 'prd' && 'https://api.your-domain.com' || 'https://api-dev.your-domain.com' }}
          NUXT_PUBLIC_ENVIRONMENT=${{ steps.env.outputs.environment }}
          EOF
          echo "Environment file created:"
          cat .env

      - name: Build Nuxt.js application
        run: |
          cd frontend
          echo "Building Nuxt.js application for static hosting..."
          npm run generate
          echo "Build completed successfully"
          echo "Output directory contents:"
          ls -la .output/ || echo "Output directory not found"
          ls -la .output/public/ || echo "Public directory not found"
          echo "Checking for index.html:"
          find .output -name "index.html" -type f || echo "No index.html found"

      - name: Deploy to S3
        run: |
          cd frontend
          echo "Deploying to S3 bucket: ${{ steps.infra.outputs.bucket_name }}"
          aws s3 sync .output/public/ s3://${{ steps.infra.outputs.bucket_name }}/ --delete
          echo "S3 deployment completed"

      - name: Invalidate CloudFront
        run: |
          echo "Invalidating CloudFront distribution: ${{ steps.infra.outputs.distribution_id }}"
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.infra.outputs.distribution_id }} \
            --paths "/*"
          echo "CloudFront invalidation completed"

      - name: Notify deployment status
        if: always()
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "✅ Deployment to ${{ steps.env.outputs.environment }} environment successful!"
          else
            echo "❌ Deployment to ${{ steps.env.outputs.environment }} environment failed!"
          fi 